/** Generated by YAKINDU Statechart Tools code generator. */
package traffic.light.trafficlightctrl;

import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import traffic.light.IStatemachine;
import traffic.light.ITimerCallback;

public interface ITrafficLightCtrlStatemachine extends ITimerCallback,IStatemachine {
	public interface SCInterface {
	
		public void raisePolice_interrupt();
		
		public void raiseToggle();
		
		public long getRedPeriod();
		
		public void setRedPeriod(long value);
		
		public long getGreenPeriod();
		
		public void setGreenPeriod(long value);
		
		public long getYellowPeriod();
		
		public void setYellowPeriod(long value);
		
	}
	
	public SCInterface getSCInterface();
	
	public interface SCITrafficLight {
	
		public boolean isRaisedDisplayRed();
		
		public boolean isRaisedDisplayGreen();
		
		public boolean isRaisedDisplayYellow();
		
		public boolean isRaisedDisplayNone();
		
	public List<SCITrafficLightListener> getListeners();
	}
	
	public interface SCITrafficLightListener {
	
		public void onDisplayRedRaised();
		public void onDisplayGreenRaised();
		public void onDisplayYellowRaised();
		public void onDisplayNoneRaised();
		}
	
	public SCITrafficLight getSCITrafficLight();
	
	public interface SCITimer {
	
	public static final long oFF = -1;
	
		public boolean isRaisedUpdateTimerColour();
		
		public String getUpdateTimerColourValue();
		
		public boolean isRaisedUpdateTimerValue();
		
		public long getUpdateTimerValueValue();
		
		public long getOFF();
		
	public List<SCITimerListener> getListeners();
	}
	
	public interface SCITimerListener {
	
		public void onUpdateTimerColourRaised(String value);
		public void onUpdateTimerValueRaised(long value);
		}
	
	public SCITimer getSCITimer();
	
}
