/** Generated by YAKINDU Statechart Tools code generator. */

package traffic.light.trafficlight.test;

import org.junit.*;
import static org.junit.Assert.*;
import traffic.light.trafficlightctrl.TrafficLightCtrlStatemachine;
import traffic.light.trafficlightctrl.TrafficLightCtrlStatemachine.State;	
import traffic.light.VirtualTimer;

/**
 * Unit TestCase for TrafficLightCtrl
 */
@SuppressWarnings("all")
public class TimerTest {
	
	private TrafficLightCtrlStatemachine statemachine;	
	private VirtualTimer timer;
	
	
	@Before
	public void timerTest_setUp() {
		statemachine = new TrafficLightCtrlStatemachine();
		timer = new VirtualTimer(200);
		statemachine.setTimer(timer);
		
		statemachine.init();
		
	}

	@After
	public void timerTest_tearDown() {
		statemachine = null;
		
		timer = null;
	}
	
	@Test
	public void timerDisplaysRemainingTimeWhileTheLightIsRed() {
		statemachine.enter();
		statemachine.getSCInterface().raiseToggle();
		assertTrue(statemachine.isStateActive(State.main_main_trafficlight_normal_normal_Red));
		assertTrue(statemachine.getSCITrafficLight().isRaisedDisplayRed());
		assertTrue(statemachine.getSCITimer().isRaisedUpdateTimerValue());
		assertTrue(/* generate org.yakindu.sct.model.stext.stext.impl.EventValueReferenceExpressionImpl@3ba60f71 not yet implemented */ == statemachine.getRedPeriod());
		assertTimerValueCountsDownToOneEverySecond();
	}
	
	@Test
	public void timerDisplaysRemainingTimeWhileTheLightIsGreed() {
		statemachine.enter();
		statemachine.getSCInterface().raiseToggle();
		timer.timeLeap(60000);
		assertTrue(statemachine.isStateActive(State.main_main_trafficlight_normal_normal_Green));
		assertTrue(statemachine.getSCITrafficLight().isRaisedDisplayGreen());
		assertTrue(statemachine.getSCITimer().isRaisedUpdateTimerValue());
		assertTrue(/* generate org.yakindu.sct.model.stext.stext.impl.EventValueReferenceExpressionImpl@7e62f48f not yet implemented */ == statemachine.getGreenPeriod());
		assertTimerValueCountsDownToOneEverySecond();
	}
	
	@Test
	public void timerDisabledWhileTheLightIsYellow() {
		statemachine.enter();
		statemachine.getSCInterface().raiseToggle();
		timer.timeLeap(60000);
		timer.timeLeap(55000);
		assertTrue(statemachine.isStateActive(State.main_main_trafficlight_normal_normal_Yellow));
		assertTrue(statemachine.getSCITrafficLight().isRaisedDisplayYellow());
		assertTrue(statemachine.getSCITimer().isRaisedUpdateTimerValue());
		assertTrue(/* generate org.yakindu.sct.model.stext.stext.impl.EventValueReferenceExpressionImpl@47e66333 not yet implemented */ == statemachine.getSCITimer().getOFF());
	}
	
	@Test
	public void timerDisabledWhileLightIsInterrupted() {
		statemachine.enter();
		statemachine.getSCInterface().raiseToggle();
		timer.timeLeap(10000);
		statemachine.getSCInterface().raisePolice_interrupt();
		assertTrue(statemachine.isStateActive(State.main_main_trafficlight_interrupted));
		assertTrue(statemachine.getSCITrafficLight().isRaisedDisplayYellow());
		assertTrue(statemachine.getSCITimer().isRaisedUpdateTimerValue());
		assertTrue(/* generate org.yakindu.sct.model.stext.stext.impl.EventValueReferenceExpressionImpl@2323e466 not yet implemented */ == statemachine.getSCITimer().getOFF());
	}
	
	@Test
	public void timerIsRedWhileTheLightIsRed() {
		statemachine.enter();
		statemachine.getSCInterface().raiseToggle();
		assertTrue(statemachine.isStateActive(State.main_main_trafficlight_normal_normal_Red));
		assertTrue(statemachine.getSCITrafficLight().isRaisedDisplayRed());
		assertTrue(statemachine.getSCITimer().isRaisedUpdateTimerColour());
		assertTrue(/* generate org.yakindu.sct.model.stext.stext.impl.EventValueReferenceExpressionImpl@6840e13c not yet implemented */.equals("Red"));
	}
	
	@Test
	public void timerIsGreedWhileTheLightIsGreen() {
		statemachine.enter();
		statemachine.getSCInterface().raiseToggle();
		timer.timeLeap(60000);
		assertTrue(statemachine.isStateActive(State.main_main_trafficlight_normal_normal_Green));
		assertTrue(statemachine.getSCITrafficLight().isRaisedDisplayGreen());
		assertTrue(statemachine.getSCITimer().isRaisedUpdateTimerColour());
		assertTrue(/* generate org.yakindu.sct.model.stext.stext.impl.EventValueReferenceExpressionImpl@74380a1a not yet implemented */.equals("Green"));
	}
	
	public void assertTimerValueCountsDownToOneEverySecond() {
		long lastValue = /* generate org.yakindu.sct.model.stext.stext.impl.EventValueReferenceExpressionImpl@58f55553 not yet implemented */;
		while (/* generate org.yakindu.sct.model.stext.stext.impl.EventValueReferenceExpressionImpl@2d088c95 not yet implemented */ > 1l) {
			timer.timeLeap(1000);
			assertTrue(/* generate org.yakindu.sct.model.stext.stext.impl.EventValueReferenceExpressionImpl@497a272b not yet implemented */ == lastValue-1l);
			lastValue = /* generate org.yakindu.sct.model.stext.stext.impl.EventValueReferenceExpressionImpl@16f323c9 not yet implemented */;
		}
	}
}
