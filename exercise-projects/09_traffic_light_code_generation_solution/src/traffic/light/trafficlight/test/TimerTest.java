/** Generated by YAKINDU Statechart Tools code generator. */

package traffic.light.trafficlight.test;

import org.junit.*;
import static org.junit.Assert.*;
import traffic.light.trafficlightctrl.TrafficLightCtrlStatemachine;
import traffic.light.trafficlightctrl.TrafficLightCtrlStatemachine.State;	
import traffic.light.VirtualTimer;

/**
 * Unit TestCase for TrafficLightCtrl
 */
@SuppressWarnings("all")
public class TimerTest {
	
	private TrafficLightCtrlStatemachine statemachine;	
	private VirtualTimer timer;
	
	
	@Before
	public void timerTest_setUp() {
		statemachine = new TrafficLightCtrlStatemachine();
		timer = new VirtualTimer(200);
		statemachine.setTimer(timer);
		
		statemachine.init();
		
	}

	@After
	public void timerTest_tearDown() {
		statemachine = null;
		
		timer = null;
	}
	
	@Test
	public void timerDisplaysRemainingTimeWhileTheLightIsRed() {
		statemachine.enter();
		statemachine.getSCInterface().raiseToggle();
		assertTrue(statemachine.isStateActive(State.main_main_trafficlight_normal_normal_Red));
		assertTrue(statemachine.getSCITrafficLight().isRaisedDisplayRed());
		assertTrue(statemachine.getSCITimer().isRaisedUpdateTimerValue());
		assertTrue(statemachine.getSCITimer().getUpdateTimerValueValue() == statemachine.getRedPeriod());
		assertTimerValueCountsDownToOneEverySecond();
	}
	
	@Test
	public void timerDisplaysRemainingTimeWhileTheLightIsGreed() {
		statemachine.enter();
		statemachine.getSCInterface().raiseToggle();
		timer.timeLeap(60l*1000l);
		assertTrue(statemachine.isStateActive(State.main_main_trafficlight_normal_normal_Green));
		assertTrue(statemachine.getSCITrafficLight().isRaisedDisplayGreen());
		assertTrue(statemachine.getSCITimer().isRaisedUpdateTimerValue());
		assertTrue(statemachine.getSCITimer().getUpdateTimerValueValue() == statemachine.getGreenPeriod());
		assertTimerValueCountsDownToOneEverySecond();
	}
	
	@Test
	public void timerDisabledWhileTheLightIsYellow() {
		statemachine.enter();
		statemachine.getSCInterface().raiseToggle();
		timer.timeLeap(60l*1000l);
		timer.timeLeap(55l*1000l);
		assertTrue(statemachine.isStateActive(State.main_main_trafficlight_normal_normal_Yellow));
		assertTrue(statemachine.getSCITrafficLight().isRaisedDisplayYellow());
		assertTrue(statemachine.getSCITimer().isRaisedUpdateTimerValue());
		assertTrue(statemachine.getSCITimer().getUpdateTimerValueValue() == statemachine.getSCITimer().getOFF());
	}
	
	@Test
	public void timerDisabledWhileLightIsInterrupted() {
		statemachine.enter();
		statemachine.getSCInterface().raiseToggle();
		timer.timeLeap((5l+5l)*1000l);
		statemachine.getSCInterface().raisePolice_interrupt();
		assertTrue(statemachine.isStateActive(State.main_main_trafficlight_interrupted));
		assertTrue(statemachine.getSCITrafficLight().isRaisedDisplayYellow());
		assertTrue(statemachine.getSCITimer().isRaisedUpdateTimerValue());
		assertTrue(statemachine.getSCITimer().getUpdateTimerValueValue() == statemachine.getSCITimer().getOFF());
	}
	
	@Test
	public void timerIsRedWhileTheLightIsRed() {
		statemachine.enter();
		statemachine.getSCInterface().raiseToggle();
		assertTrue(statemachine.isStateActive(State.main_main_trafficlight_normal_normal_Red));
		assertTrue(statemachine.getSCITrafficLight().isRaisedDisplayRed());
		assertTrue(statemachine.getSCITimer().isRaisedUpdateTimerColour());
		assertTrue(statemachine.getSCITimer().getUpdateTimerColourValue().equals("Red"));
	}
	
	@Test
	public void timerIsGreedWhileTheLightIsGreen() {
		statemachine.enter();
		statemachine.getSCInterface().raiseToggle();
		timer.timeLeap(60l*1000l);
		assertTrue(statemachine.isStateActive(State.main_main_trafficlight_normal_normal_Green));
		assertTrue(statemachine.getSCITrafficLight().isRaisedDisplayGreen());
		assertTrue(statemachine.getSCITimer().isRaisedUpdateTimerColour());
		assertTrue(statemachine.getSCITimer().getUpdateTimerColourValue().equals("Green"));
	}
	
	public void assertTimerValueCountsDownToOneEverySecond() {
		long lastValue = statemachine.getSCITimer().getUpdateTimerValueValue();
		while (statemachine.getSCITimer().getUpdateTimerValueValue() > 1l) {
			timer.timeLeap(1l*1000l);
			assertTrue(statemachine.getSCITimer().getUpdateTimerValueValue() == lastValue-1l);
			lastValue = statemachine.getSCITimer().getUpdateTimerValueValue();
		}
	}
}
